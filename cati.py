import os
import sys
import json
import argparse
import subprocess
from pathlib import Path

model_config_path = Path("model_config.json")

def get_model_paths():

    """
    Retrieves model and test file paths from the configuration file.

    Returns:
    dict: A dictionary containing the model configurations.
    """

    if not os.path.exists(model_config_path):
        print(f"Model paths config not found at {model_config_path}")
        sys.exit(0)
    
    with open(model_config_path, "r") as model_config_file:
        model_config = json.load(model_config_file)

    return model_config

def run_model(model, env_path, script_path, input_folder, output_folder, conf_score, save_images, cuda):
    
    """
    Executes a model script within a specified Conda environment with the specified parameters.

    Parameters:
    env_path (str): The path to the Conda environment with the models dependencies.
    script_path (str): The path to the Python script that runs the model.
    input_folder (str): Path to the folder containing the input images for the model.
    output_folder (str): Path to the folder where the model's output will be saved.
    conf_score (float): Confidence score threshold to pass to the model script.
    save_images (bool): Flag indicating whether or not to save images generated by the model.
    cuda (bool): Flag indicating whether to enable CUDA for GPU acceleration.

    Returns:
    None
    """

    command = [
    "conda", "run", "-p", env_path,
    "python", script_path,
    f"--input={input_folder}",
    f"--output={output_folder}",
    f"--conf={conf_score}",
    ]

    if save_images:
        command.append("--save_images")

    if cuda:
        command.append("--cuda")

    try:
        result = subprocess.run(command, capture_output=True, text=True)
        if result.returncode != 0:
            print("error from inner script", result.stderr)
    except Exception as e:
        print(f"subprocess from inner script error: {e}")

def check_folders(args):
    
    """
    Checks if the input folder exists and creates the output folder if it does not exist.

    Parameters:
    args: Arguments containing paths for input and output folders.

    Returns:
    tuple: A tuple containing the validated input folder and the created (or existing) output folder.
    """

    input_folder = Path(args.input)

    if not input_folder.exists():
        raise FileNotFoundError(f"Input Folder {str(input_folder)} not found!")
    
    output_folder = Path(args.output)
    output_folder.mkdir(parents=True, exist_ok=True)

    return input_folder, output_folder

def grab_images(input_dir):
    
    """
    Retrieves a list of image file paths from the specified directory with image extensions (png/jpg/jpeg).

    Parameters:
    input_dir (str): The directory path for the images.

    Returns:
    list: A list of file paths to the images.
    """

    possible_extensions = ["*.png", "*.jpg", "*.jpeg"]

    image_paths = []

    for ext in possible_extensions:
        image_paths.extend(input_dir.glob(ext))

    return image_paths


def main():

    model_names = get_model_paths()

    parser = argparse.ArgumentParser(description="CATI (Common Automotive Tasks on Images)")
    parser.add_argument("--input", required=True, help="Path of input images directory")
    parser.add_argument("--output", required=True, help="Path of output directory")
    parser.add_argument("--model", nargs="+", required=True, choices=model_names.keys(), help="Choose one or more models for prediction")
    parser.add_argument("--conf", type=float, default=0.5, help="Confidence score for model prediction")
    parser.add_argument("--save_images", action="store_true", help="Save annotated images?")
    parser.add_argument("--cuda", action="store_true", help="Use cuda?")

    args = parser.parse_args()

    input_path, output_path =  check_folders(args)

    models = args.model

    image_paths = grab_images(input_path)

    if len(image_paths) == 0:
        print(f"No images found in folder {input_path} ... terminating")
        sys.exit(0)
        

    for i, image_path in enumerate(image_paths):

        print(f"Processing image {i+1} out of {len(image_paths)} ({round((i+1)/len(image_paths)*100, 2)}%)")

        for model in models:


            model_info = model_names.get(model, None)
            if model_info is None:
                print(f"Information from model {model} could not be resolved from config")
            else:
                env_path = model_info["env"]
                script_path = model_info["script"]

                run_model(model, env_path, script_path, image_path, output_path, args.conf, args.save_images, args.cuda)

if __name__ == "__main__":
    main()